# Copyright 2025 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
no_package = True
skip_missing_interpreters = True
env_list = fmt, lint, unit, static, coverage-report
min_version = 4.0.0

[vars]
src_path = {tox_root}/src
tests_path = {tox_root}/tests
;lib_path = {tox_root}/lib/charms/operator_name_with_underscores
all_path = {[vars]src_path} {[vars]tests_path}

[testenv]
set_env =
    PYTHONPATH = {tox_root}/lib:{[vars]src_path}
    PYTHONBREAKPOINT=pdb.set_trace
    PY_COLORS=1
pass_env =
    PYTHONPATH
    CHARM_BUILD_DIR
    MODEL_SETTINGS

[testenv:fmt]
description = Apply coding style standards to code
deps =
    black
    isort
commands =
    isort {[vars]all_path}
    black {[vars]all_path} --target-version=py310

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    codespell
    flake8-builtins
    flake8-copyright
    flake8-docstrings-complete>=1.0.4
    flake8-docstrings>=1.6.0
    flake8-test-docs
    flake8
    isort
    types-requests
    types-PyYAML
    mypy
    pep8-naming
    pydocstyle
    snowballstemmer<3.0.0
    pylint
    pyproject-flake8
    pytest_operator
    types-requests
    types-PyYAML
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/tests/integration/requirements.txt
    -r{toxinidir}/tests/unit/requirements.txt
commands =
    pydocstyle {[vars]src_path}
    # uncomment the following line if this charm owns a lib
    # codespell {[vars]lib_path}
    codespell {tox_root} \
      --skip {toxinidir}/.git \
      --skip {toxinidir}/.tox \
      --skip {toxinidir}/lib \
      --skip {toxinidir}/cron.d \
      --skip {toxinidir}/venv \
      --skip {toxinidir}/.mypy_cache \
      --skip {toxinidir}/patches
    # pflake8 wrapper supports config from pyproject.toml
    pflake8 {[vars]all_path} --ignore=W503
    isort --check-only --diff {[vars]all_path}
    black --target-version=py310 --check --diff {[vars]all_path}
    mypy {[vars]all_path}
    pylint {[vars]all_path}

[testenv:unit]
description = Run unit tests
deps =
    pytest
    coverage[toml]
    -r {tox_root}/requirements.txt
    -r {tox_root}/tests/unit/requirements.txt
commands =
    coverage run --source={[vars]src_path} \
                 -m pytest --ignore={[vars]tests_path}integration \
                 --tb native \
                 -v \
                 -s \
                 {posargs} \
                 {[vars]tests_path}/unit
    coverage report

[testenv:static]
description = Run static type checks
deps =
    pyright
    -r {tox_root}/requirements.txt
    -r {tox_root}/tests/unit/requirements.txt
    -r {tox_root}/tests/integration/requirements.txt
commands =
    pyright {posargs} {[vars]src_path} {[vars]tests_path}
    
[testenv:coverage-report]
description = Create test coverage report
deps =
    pytest
    coverage[toml]
    -r{toxinidir}/requirements.txt
commands =
    coverage report

[testenv:integration]
description = Run integration tests
deps =
    -r {tox_root}/requirements.txt
    -r {tox_root}/tests/integration/requirements.txt
commands =
    pytest -v \
           -s \
           --tb native \
           --log-cli-level=INFO \
           {posargs} \
           {[vars]tests_path}/integration
